# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from ops import ml_api_pb2 as ops_dot_ml__api__pb2


class MLServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.UploadData = channel.unary_unary(
                '/ml_api.MLService/UploadData',
                request_serializer=ops_dot_ml__api__pb2.UploadDataRequest.SerializeToString,
                response_deserializer=ops_dot_ml__api__pb2.UploadDataResponse.FromString,
                )
        self.GetStatus = channel.unary_unary(
                '/ml_api.MLService/GetStatus',
                request_serializer=ops_dot_ml__api__pb2.GetStatusRequest.SerializeToString,
                response_deserializer=ops_dot_ml__api__pb2.GetStatusResponse.FromString,
                )
        self.ExecuteAction = channel.unary_unary(
                '/ml_api.MLService/ExecuteAction',
                request_serializer=ops_dot_ml__api__pb2.ActionRequest.SerializeToString,
                response_deserializer=ops_dot_ml__api__pb2.ActionResponse.FromString,
                )
        self.Download = channel.unary_unary(
                '/ml_api.MLService/Download',
                request_serializer=ops_dot_ml__api__pb2.DownloadRequest.SerializeToString,
                response_deserializer=ops_dot_ml__api__pb2.DownloadResponse.FromString,
                )


class MLServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def UploadData(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetStatus(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ExecuteAction(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Download(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_MLServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'UploadData': grpc.unary_unary_rpc_method_handler(
                    servicer.UploadData,
                    request_deserializer=ops_dot_ml__api__pb2.UploadDataRequest.FromString,
                    response_serializer=ops_dot_ml__api__pb2.UploadDataResponse.SerializeToString,
            ),
            'GetStatus': grpc.unary_unary_rpc_method_handler(
                    servicer.GetStatus,
                    request_deserializer=ops_dot_ml__api__pb2.GetStatusRequest.FromString,
                    response_serializer=ops_dot_ml__api__pb2.GetStatusResponse.SerializeToString,
            ),
            'ExecuteAction': grpc.unary_unary_rpc_method_handler(
                    servicer.ExecuteAction,
                    request_deserializer=ops_dot_ml__api__pb2.ActionRequest.FromString,
                    response_serializer=ops_dot_ml__api__pb2.ActionResponse.SerializeToString,
            ),
            'Download': grpc.unary_unary_rpc_method_handler(
                    servicer.Download,
                    request_deserializer=ops_dot_ml__api__pb2.DownloadRequest.FromString,
                    response_serializer=ops_dot_ml__api__pb2.DownloadResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'ml_api.MLService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class MLService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def UploadData(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ml_api.MLService/UploadData',
            ops_dot_ml__api__pb2.UploadDataRequest.SerializeToString,
            ops_dot_ml__api__pb2.UploadDataResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetStatus(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ml_api.MLService/GetStatus',
            ops_dot_ml__api__pb2.GetStatusRequest.SerializeToString,
            ops_dot_ml__api__pb2.GetStatusResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ExecuteAction(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ml_api.MLService/ExecuteAction',
            ops_dot_ml__api__pb2.ActionRequest.SerializeToString,
            ops_dot_ml__api__pb2.ActionResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Download(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ml_api.MLService/Download',
            ops_dot_ml__api__pb2.DownloadRequest.SerializeToString,
            ops_dot_ml__api__pb2.DownloadResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
